#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema ERP - Vers√£o GUI
Interface gr√°fica moderna inspirada em sistemas profissionais
Autor: Sistema ERP
Data: 2025
"""

import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import json
import os
import hashlib
from datetime import datetime
from dataclasses import dataclass, asdict
from typing import Dict, List, Optional, Any
import sqlite3

@dataclass
class Employee:
    """Classe para representar um funcion√°rio"""
    id: str
    name: str
    position: str
    department: str
    hire_date: str
    salary: float
    active: bool = True

@dataclass
class Equipment:
    """Classe para representar um equipamento"""
    id: str
    name: str
    type: str
    brand: str
    model: str
    serial_number: str
    purchase_date: str
    status: str = "Ativo"

@dataclass
class ServiceOrder:
    """Classe para representar uma ordem de servi√ßo"""
    id: str
    employee_id: str
    equipment_id: str
    description: str
    priority: str
    status: str
    created_date: str
    due_date: str

class DatabaseManager:
    """Gerenciador de banco de dados SQLite"""
    
    def __init__(self, db_path: str = "erp_database.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """Inicializa o banco de dados com as tabelas necess√°rias"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Tabela de usu√°rios
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                role TEXT NOT NULL,
                created_date TEXT NOT NULL,
                last_login TEXT,
                active BOOLEAN DEFAULT 1
            )
        ''')
        
        # Tabela de funcion√°rios
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS employees (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                department TEXT NOT NULL,
                hire_date TEXT NOT NULL,
                salary REAL NOT NULL,
                active BOOLEAN DEFAULT 1
            )
        ''')
        
        # Tabela de equipamentos
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS equipment (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                type TEXT NOT NULL,
                brand TEXT NOT NULL,
                model TEXT NOT NULL,
                serial_number TEXT NOT NULL,
                purchase_date TEXT NOT NULL,
                status TEXT DEFAULT 'Ativo'
            )
        ''')
        
        # Tabela de ordens de servi√ßo
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS service_orders (
                id TEXT PRIMARY KEY,
                employee_id TEXT NOT NULL,
                equipment_id TEXT NOT NULL,
                description TEXT NOT NULL,
                priority TEXT NOT NULL,
                status TEXT NOT NULL,
                created_date TEXT NOT NULL,
                due_date TEXT NOT NULL,
                FOREIGN KEY (employee_id) REFERENCES employees (id),
                FOREIGN KEY (equipment_id) REFERENCES equipment (id)
            )
        ''')
        
        # Criar usu√°rio admin padr√£o se n√£o existir
        cursor.execute('SELECT COUNT(*) FROM users WHERE username = ?', ('admin',))
        if cursor.fetchone()[0] == 0:
            password_hash = hashlib.sha256('mudar@123'.encode()).hexdigest()
            cursor.execute('''
                INSERT INTO users (username, password_hash, role, created_date)
                VALUES (?, ?, ?, ?)
            ''', ('admin', password_hash, 'Admin', datetime.now().isoformat()))
        
        conn.commit()
        conn.close()
    
    def execute_query(self, query: str, params: tuple = ()) -> List[tuple]:
        """Executa uma query e retorna os resultados"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute(query, params)
        results = cursor.fetchall()
        conn.commit()
        conn.close()
        return results
    
    def execute_insert(self, query: str, params: tuple = ()) -> bool:
        """Executa uma query de inser√ß√£o"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(query, params)
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"Erro ao executar inser√ß√£o: {e}")
            return False

class LoginWindow:
    """Janela de login do sistema"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Sistema ERP - Login")
        self.root.geometry("400x300")
        self.root.resizable(False, False)
        
        # Centralizar janela
        self.center_window()
        
        self.db = DatabaseManager()
        self.authenticated_user = None
        
        self.create_widgets()
    
    def center_window(self):
        """Centraliza a janela na tela"""
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (400 // 2)
        y = (self.root.winfo_screenheight() // 2) - (300 // 2)
        self.root.geometry(f'400x300+{x}+{y}')
    
    def create_widgets(self):
        """Cria os widgets da janela de login"""
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        title_label = ttk.Label(main_frame, text="Sistema ERP", font=("Arial", 20, "bold"))
        title_label.pack(pady=(0, 20))
        
        # Subtitle
        subtitle_label = ttk.Label(main_frame, text="Enterprise Resource Planning", font=("Arial", 10))
        subtitle_label.pack(pady=(0, 30))
        
        # Frame de login
        login_frame = ttk.LabelFrame(main_frame, text="Autentica√ß√£o", padding="20")
        login_frame.pack(fill=tk.X, pady=10)
        
        # Grid para organizar campos
        login_frame.grid_columnconfigure(1, weight=1)
        
        # Usu√°rio
        ttk.Label(login_frame, text="Usu√°rio:", font=("Arial", 10, "bold")).grid(row=0, column=0, sticky="w", pady=5)
        self.username_var = tk.StringVar(value="admin")
        self.username_entry = ttk.Entry(login_frame, textvariable=self.username_var, width=25, font=("Arial", 10))
        self.username_entry.grid(row=0, column=1, sticky="ew", padx=(10, 0), pady=5)
        
        # Senha
        ttk.Label(login_frame, text="Senha:", font=("Arial", 10, "bold")).grid(row=1, column=0, sticky="w", pady=5)
        self.password_var = tk.StringVar()
        self.password_entry = ttk.Entry(login_frame, textvariable=self.password_var, show="*", width=25, font=("Arial", 10))
        self.password_entry.grid(row=1, column=1, sticky="ew", padx=(10, 0), pady=5)
        
        # Frame para bot√µes
        button_frame = ttk.Frame(login_frame)
        button_frame.grid(row=2, column=0, columnspan=2, pady=20)
        
        # Bot√£o de login
        login_btn = ttk.Button(button_frame, text="üîê Entrar", command=self.login)
        login_btn.pack(side=tk.LEFT, padx=10)
        
        # Bot√£o de sair
        exit_btn = ttk.Button(button_frame, text="‚ùå Sair", command=self.root.quit)
        exit_btn.pack(side=tk.LEFT, padx=10)
        
        # Bind Enter key nos campos
        self.username_entry.bind('<Return>', lambda e: self.password_entry.focus())
        self.password_entry.bind('<Return>', lambda e: self.login())
        
        # Bind Escape para sair
        self.root.bind('<Escape>', lambda e: self.root.quit())
        
        # Foco inicial no campo de senha (usu√°rio j√° preenchido)
        self.password_entry.focus()
        
        # Separador
        separator = ttk.Separator(main_frame, orient='horizontal')
        separator.pack(fill=tk.X, pady=10)
        
        # Informa√ß√£o inicial
        info_frame = ttk.Frame(main_frame)
        info_frame.pack(pady=10)
        
        info_label = ttk.Label(info_frame, text="üîë Senha inicial: mudar@123", 
                              font=("Arial", 10, "bold"), foreground="blue")
        info_label.pack()
        
        help_label = ttk.Label(info_frame, text="üí° Pressione Enter para fazer login", 
                              font=("Arial", 8), foreground="gray")
        help_label.pack(pady=5)
    
    def login(self):
        """Realiza o processo de login"""
        username = self.username_var.get().strip()
        password = self.password_var.get().strip()
        
        # Validar campos
        if not username:
            messagebox.showerror("Erro de Login", "Por favor, digite o nome de usu√°rio!")
            self.username_entry.focus()
            return
            
        if not password:
            messagebox.showerror("Erro de Login", "Por favor, digite a senha!")
            self.password_entry.focus()
            return
        
        # Desabilitar bot√£o durante login
        login_btn = None
        for widget in self.root.winfo_children():
            if hasattr(widget, 'winfo_children'):
                for child in widget.winfo_children():
                    if isinstance(child, ttk.LabelFrame):
                        for btn in child.winfo_children():
                            if isinstance(btn, ttk.Frame):
                                for button in btn.winfo_children():
                                    if isinstance(button, ttk.Button) and "Entrar" in button['text']:
                                        login_btn = button
                                        break
        
        if login_btn:
            login_btn.configure(text="üîÑ Conectando...", state="disabled")
            self.root.update()
        
        try:
            # Verificar credenciais
            password_hash = hashlib.sha256(password.encode()).hexdigest()
            result = self.db.execute_query(
                'SELECT id, username, role FROM users WHERE username = ? AND password_hash = ? AND active = 1',
                (username, password_hash)
            )
            
            if result:
                user_id, username, role = result[0]
                self.authenticated_user = {
                    'id': user_id,
                    'username': username,
                    'role': role
                }
                
                # Atualizar √∫ltimo login
                self.db.execute_insert(
                    'UPDATE users SET last_login = ? WHERE id = ?',
                    (datetime.now().isoformat(), user_id)
                )
                
                # Sucesso - mostrar mensagem e fechar
                messagebox.showinfo("Login", f"Bem-vindo(a), {username}!\n\nAcessando o sistema...")
                self.root.destroy()
                
            else:
                # Falha no login
                messagebox.showerror("Erro de Login", 
                                   "‚ùå Usu√°rio ou senha inv√°lidos!\n\n" +
                                   "üí° Verifique:\n" +
                                   "‚Ä¢ Usu√°rio: admin\n" +
                                   "‚Ä¢ Senha: mudar@123")
                self.password_var.set("")
                self.password_entry.focus()
                
        except Exception as e:
            messagebox.showerror("Erro do Sistema", f"Erro ao conectar com o banco de dados:\n{str(e)}")
            
        finally:
            # Reabilitar bot√£o
            if login_btn:
                login_btn.configure(text="üîê Entrar", state="normal")
    
    def run(self):
        """Executa a janela de login"""
        self.root.mainloop()
        return self.authenticated_user

class MainWindow:
    """Janela principal do sistema ERP"""
    
    def __init__(self, user_info):
        self.user_info = user_info
        self.db = DatabaseManager()
        
        self.root = tk.Tk()
        self.root.title(f"Sistema ERP - {user_info['username']} ({user_info['role']})")
        self.root.geometry("1200x800")
        self.root.state('zoomed')  # Maximizar no Windows
        
        self.create_menu()
        self.create_widgets()
        self.create_status_bar()
        
        # Mostrar dashboard inicial
        self.show_dashboard()
    
    def create_menu(self):
        """Cria a barra de menu"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # Menu Arquivo
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Arquivo", menu=file_menu)
        file_menu.add_command(label="Dashboard", command=self.show_dashboard)
        file_menu.add_separator()
        file_menu.add_command(label="Sair", command=self.root.quit)
        
        # Menu Funcion√°rios
        emp_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Funcion√°rios", menu=emp_menu)
        emp_menu.add_command(label="Cadastrar", command=self.show_employee_form)
        emp_menu.add_command(label="Consultar", command=self.show_employees)
        
        # Menu Equipamentos
        eq_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Equipamentos", menu=eq_menu)
        eq_menu.add_command(label="Cadastrar", command=self.show_equipment_form)
        eq_menu.add_command(label="Consultar", command=self.show_equipment)
        
        # Menu Ordens de Servi√ßo
        os_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Ordens de Servi√ßo", menu=os_menu)
        os_menu.add_command(label="Nova O.S.", command=self.show_service_order_form)
        os_menu.add_command(label="Consultar", command=self.show_service_orders)
        
        # Menu Administra√ß√£o
        if self.user_info['role'] == 'Admin':
            admin_menu = tk.Menu(menubar, tearoff=0)
            menubar.add_cascade(label="Administra√ß√£o", menu=admin_menu)
            admin_menu.add_command(label="Gerenciar Usu√°rios", command=self.show_user_management)
            admin_menu.add_command(label="Backup", command=self.backup_database)
        
        # Menu Ajuda
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Ajuda", menu=help_menu)
        help_menu.add_command(label="Sobre", command=self.show_about)
    
    def create_widgets(self):
        """Cria os widgets principais"""
        # Frame principal
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Toolbar
        toolbar = ttk.Frame(self.main_frame)
        toolbar.pack(fill=tk.X, pady=(0, 10))
        
        # Bot√µes da toolbar
        ttk.Button(toolbar, text="üìä Dashboard", command=self.show_dashboard).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üë• Funcion√°rios", command=self.show_employees).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üîß Equipamentos", command=self.show_equipment).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üìã Ordens de Servi√ßo", command=self.show_service_orders).pack(side=tk.LEFT, padx=2)
        
        # Frame de conte√∫do
        self.content_frame = ttk.Frame(self.main_frame)
        self.content_frame.pack(fill=tk.BOTH, expand=True)
    
    def create_status_bar(self):
        """Cria a barra de status"""
        status_frame = ttk.Frame(self.root)
        status_frame.pack(fill=tk.X, side=tk.BOTTOM)
        
        self.status_var = tk.StringVar()
        self.status_var.set(f"Usu√°rio: {self.user_info['username']} | {datetime.now().strftime('%d/%m/%Y %H:%M')}")
        
        status_label = ttk.Label(status_frame, textvariable=self.status_var)
        status_label.pack(side=tk.LEFT, padx=10, pady=5)
        
        # Atualizar hora a cada minuto
        self.update_status()
    
    def update_status(self):
        """Atualiza a barra de status"""
        self.status_var.set(f"Usu√°rio: {self.user_info['username']} | {datetime.now().strftime('%d/%m/%Y %H:%M')}")
        self.root.after(60000, self.update_status)  # Atualizar a cada minuto
    
    def clear_content(self):
        """Limpa o frame de conte√∫do"""
        for widget in self.content_frame.winfo_children():
            widget.destroy()
    
    def show_dashboard(self):
        """Mostra o dashboard principal"""
        self.clear_content()
        
        # T√≠tulo
        title = ttk.Label(self.content_frame, text="Dashboard - Sistema ERP", 
                         font=("Arial", 16, "bold"))
        title.pack(pady=20)
        
        # Frame de estat√≠sticas
        stats_frame = ttk.Frame(self.content_frame)
        stats_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Obter estat√≠sticas
        emp_count = len(self.db.execute_query('SELECT id FROM employees WHERE active = 1'))
        eq_count = len(self.db.execute_query('SELECT id FROM equipment'))
        os_open = len(self.db.execute_query("SELECT id FROM service_orders WHERE status != 'Conclu√≠da'"))
        
        # Cards de estat√≠sticas
        self.create_stat_card(stats_frame, "üë• Funcion√°rios", str(emp_count), 0, 0)
        self.create_stat_card(stats_frame, "üîß Equipamentos", str(eq_count), 0, 1)
        self.create_stat_card(stats_frame, "üìã O.S. Abertas", str(os_open), 0, 2)
        
        # Frame de a√ß√µes r√°pidas
        actions_frame = ttk.LabelFrame(self.content_frame, text="A√ß√µes R√°pidas", padding="20")
        actions_frame.pack(fill=tk.X, padx=20, pady=20)
        
        ttk.Button(actions_frame, text="Cadastrar Funcion√°rio", 
                  command=self.show_employee_form).pack(side=tk.LEFT, padx=10)
        ttk.Button(actions_frame, text="Nova Ordem de Servi√ßo", 
                  command=self.show_service_order_form).pack(side=tk.LEFT, padx=10)
        ttk.Button(actions_frame, text="Consultar Equipamentos", 
                  command=self.show_equipment).pack(side=tk.LEFT, padx=10)
    
    def create_stat_card(self, parent, title, value, row, col):
        """Cria um card de estat√≠stica"""
        card = ttk.LabelFrame(parent, text=title, padding="20")
        card.grid(row=row, column=col, padx=10, pady=10, sticky="ew")
        
        value_label = ttk.Label(card, text=value, font=("Arial", 24, "bold"))
        value_label.pack()
        
        # Configurar grid weights
        parent.grid_columnconfigure(col, weight=1)
    
    def show_employees(self):
        """Mostra a lista de funcion√°rios"""
        self.clear_content()
        
        # T√≠tulo e bot√£o de novo
        header_frame = ttk.Frame(self.content_frame)
        header_frame.pack(fill=tk.X, padx=20, pady=10)
        
        ttk.Label(header_frame, text="Gest√£o de Funcion√°rios", 
                 font=("Arial", 14, "bold")).pack(side=tk.LEFT)
        ttk.Button(header_frame, text="+ Novo Funcion√°rio", 
                  command=self.show_employee_form).pack(side=tk.RIGHT)
        
        # Treeview para funcion√°rios
        columns = ('ID', 'Nome', 'Cargo', 'Departamento', 'Data Admiss√£o', 'Sal√°rio')
        tree = ttk.Treeview(self.content_frame, columns=columns, show='headings', height=15)
        
        # Configurar colunas
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=150)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(self.content_frame, orient=tk.VERTICAL, command=tree.yview)
        tree.configure(yscrollcommand=scrollbar.set)
        
        # Pack treeview e scrollbar
        tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=20)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Carregar dados
        employees = self.db.execute_query('SELECT * FROM employees WHERE active = 1')
        for emp in employees:
            tree.insert('', tk.END, values=emp)
    
    def show_employee_form(self):
        """Mostra o formul√°rio de cadastro de funcion√°rio"""
        form_window = tk.Toplevel(self.root)
        form_window.title("Cadastro de Funcion√°rio")
        form_window.geometry("500x600")
        form_window.resizable(False, False)
        
        # Centralizar janela
        form_window.transient(self.root)
        form_window.grab_set()
        
        # Frame principal
        main_frame = ttk.Frame(form_window, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        ttk.Label(main_frame, text="Cadastro de Funcion√°rio", 
                 font=("Arial", 14, "bold")).pack(pady=(0, 20))
        
        # Campos do formul√°rio
        fields = [
            ("ID:", "id"),
            ("Nome:", "name"),
            ("Cargo:", "position"),
            ("Departamento:", "department"),
            ("Data de Admiss√£o:", "hire_date"),
            ("Sal√°rio:", "salary")
        ]
        
        entries = {}
        for label, field in fields:
            frame = ttk.Frame(main_frame)
            frame.pack(fill=tk.X, pady=5)
            
            ttk.Label(frame, text=label, width=15).pack(side=tk.LEFT)
            entry = ttk.Entry(frame, width=30)
            entry.pack(side=tk.LEFT, padx=(10, 0), fill=tk.X, expand=True)
            entries[field] = entry
        
        # Gerar ID autom√°tico
        emp_count = len(self.db.execute_query('SELECT id FROM employees'))
        entries['id'].insert(0, f"EMP{emp_count + 1:04d}")
        entries['hire_date'].insert(0, datetime.now().strftime('%Y-%m-%d'))
        
        # Bot√µes
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=20)
        
        def save_employee():
            data = {field: entry.get().strip() for field, entry in entries.items()}
            
            if not all(data.values()):
                messagebox.showerror("Erro", "Todos os campos s√£o obrigat√≥rios!")
                return
            
            try:
                salary = float(data['salary'])
                success = self.db.execute_insert('''
                    INSERT INTO employees (id, name, position, department, hire_date, salary, active)
                    VALUES (?, ?, ?, ?, ?, ?, 1)
                ''', (data['id'], data['name'], data['position'], data['department'], 
                     data['hire_date'], salary))
                
                if success:
                    messagebox.showinfo("Sucesso", "Funcion√°rio cadastrado com sucesso!")
                    form_window.destroy()
                    self.show_employees()
                else:
                    messagebox.showerror("Erro", "Erro ao cadastrar funcion√°rio!")
            except ValueError:
                messagebox.showerror("Erro", "Sal√°rio deve ser um n√∫mero v√°lido!")
        
        ttk.Button(button_frame, text="Salvar", command=save_employee).pack(side=tk.LEFT, padx=10)
        ttk.Button(button_frame, text="Cancelar", command=form_window.destroy).pack(side=tk.LEFT)
    
    def show_equipment(self):
        """Mostra a lista de equipamentos"""
        self.clear_content()
        
        # Implementa√ß√£o similar aos funcion√°rios
        ttk.Label(self.content_frame, text="Gest√£o de Equipamentos", 
                 font=("Arial", 14, "bold")).pack(pady=20)
        
        # Bot√£o tempor√°rio
        ttk.Button(self.content_frame, text="Em desenvolvimento...", 
                  state=tk.DISABLED).pack()
    
    def show_equipment_form(self):
        """Mostra o formul√°rio de cadastro de equipamento"""
        messagebox.showinfo("Em desenvolvimento", "Funcionalidade em desenvolvimento!")
    
    def show_service_orders(self):
        """Mostra a lista de ordens de servi√ßo"""
        self.clear_content()
        
        ttk.Label(self.content_frame, text="Ordens de Servi√ßo", 
                 font=("Arial", 14, "bold")).pack(pady=20)
        
        ttk.Button(self.content_frame, text="Em desenvolvimento...", 
                  state=tk.DISABLED).pack()
    
    def show_service_order_form(self):
        """Mostra o formul√°rio de nova ordem de servi√ßo"""
        messagebox.showinfo("Em desenvolvimento", "Funcionalidade em desenvolvimento!")
    
    def show_user_management(self):
        """Mostra o gerenciamento de usu√°rios"""
        messagebox.showinfo("Administra√ß√£o", "Gerenciamento de usu√°rios em desenvolvimento!")
    
    def backup_database(self):
        """Realiza backup do banco de dados"""
        messagebox.showinfo("Backup", "Funcionalidade de backup em desenvolvimento!")
    
    def show_about(self):
        """Mostra informa√ß√µes sobre o sistema"""
        about_text = """Sistema ERP - Vers√£o GUI 1.0

Enterprise Resource Planning
Interface gr√°fica moderna e intuitiva

Desenvolvido em Python com tkinter
Base de dados SQLite

¬© 2025 - Sistema ERP"""
        
        messagebox.showinfo("Sobre o Sistema", about_text)
    
    def run(self):
        """Executa a janela principal"""
        self.root.mainloop()

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    # Tela de login
    login = LoginWindow()
    user_info = login.run()
    
    if user_info:
        # Se login foi bem-sucedido, abrir janela principal
        main_app = MainWindow(user_info)
        main_app.run()

if __name__ == "__main__":
    main()
